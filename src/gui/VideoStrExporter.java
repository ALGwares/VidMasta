package gui;

import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.concurrent.ConcurrentSkipListMap;
import listener.ContentType;
import listener.GuiListener;
import listener.VideoStrExportListener;
import str.Str;
import util.Connection;
import util.Constant;
import util.Regex;

public class VideoStrExporter implements VideoStrExportListener {

  private final String title, year;
  private final boolean isTVShow, exportToEmail, exportSecondaryContent;
  private final int numStrsToExport;
  private final Map<ContentType, String> strs = new ConcurrentSkipListMap<ContentType, String>();
  private boolean showTVChoices = true;
  private volatile String season, episode;

  public VideoStrExporter(String title, String year, boolean isTVShow, boolean exportToEmail, boolean exportSecondaryContent, int numStrsToExport) {
    this.title = title;
    this.year = year;
    this.isTVShow = isTVShow;
    this.exportToEmail = exportToEmail;
    this.exportSecondaryContent = exportSecondaryContent;
    this.numStrsToExport = numStrsToExport;
  }

  @Override
  public void export(ContentType contentType, String str, boolean cancel, GuiListener guiListener) {
    try {
      export(contentType, cancel || str == null ? "" : str.trim(), guiListener);
    } catch (Exception e) {
      if (!cancel) {
        guiListener.error(e);
      }
    }
  }

  private void export(ContentType contentType, String str, GuiListener guiListener) throws Exception {
    strs.put(contentType, str);
    if (strs.size() != numStrsToExport) {
      return;
    }

    String summary = strs.get(ContentType.SUMMARY);
    if (summary == null) {
      summary = "";
    } else {
      if (summary.isEmpty()) {
        summary = Regex.htmlToPlainText(title) + ' ' + year;
        if (!exportToEmail) {
          strs.put(ContentType.SUMMARY, summary);
        }
      }
      if (exportToEmail) {
        strs.put(ContentType.SUMMARY, summary += ' ' + (isTVShow ? '(' + Str.str("tvShow") + episode() + ')' : '(' + Str.str("movie") + ')'));
      }
    }

    String imagePath = null;
    StringBuilder strBuf = new StringBuilder(numStrsToExport * 256);
    Set<String> lines = new HashSet<String>(numStrsToExport);

    for (Entry<ContentType, String> entry : strs.entrySet()) {
      if (!lines.add(entry.toString())) {
        continue;
      }
      String currStr = entry.getValue();
      if (currStr.isEmpty()) {
        continue;
      }
      ContentType type = entry.getKey();
      if (type == ContentType.IMAGE) {
        imagePath = currStr;
        continue;
      }
      if (exportToEmail) {
        String typeName = type.toString();
        if (!typeName.isEmpty()) {
          strBuf.append(Str.str(typeName)).append(' ');
        }
        strBuf.append(currStr).append("\n\n");
      } else {
        strBuf.append(currStr).append('\n');
      }
    }

    String content = strBuf.toString();
    if (exportToEmail) {
      if (content.trim().equals(summary)) {
        notFound(guiListener);
        return;
      }
      String emailBody = content;
      if (!Str.get(699).isEmpty()) {
        emailBody += "\n\n" + Str.str("autoGenerated", Constant.APP_TITLE, Str.get(699)) + "\n\n";
      }
      if (guiListener.canEmailWithDefaultApp()) {
        Connection.email(summary, emailBody);
        if (UI.exportToClipboard(imagePath, "")) {
          guiListener.timedMsg(Str.str("imageCopied"));
        }
        return;
      }
      UI.exportToClipboard(imagePath, emailBody);
      guiListener.timedMsg(Str.str("content" + (imagePath == null ? "" : "AndImage") + "Copied"));
    } else if (UI.exportToClipboard(imagePath, content.trim())) {
      for (ContentType type : new ContentType[]{ContentType.DOWNLOAD1, ContentType.DOWNLOAD2, ContentType.DOWNLOAD3, ContentType.SUBTITLE}) {
        if (strs.get(type) != null) {
          guiListener.timedMsg(Str.str("contentCopied"));
          return;
        }
      }
    } else {
      notFound(guiListener);
    }
  }

  @Override
  public boolean exportSecondaryContent() {
    return exportSecondaryContent;
  }

  private static void notFound(GuiListener guiListener) {
    guiListener.timedMsg(Str.str("contentNotCopied"));
  }

  @Override
  public boolean showTVChoices() {
    boolean prevShowTVChoices = showTVChoices;
    showTVChoices = false;
    return prevShowTVChoices;
  }

  @Override
  public void setEpisode(String season, String episode) {
    this.season = season;
    this.episode = episode;
  }

  private String episode() {
    Integer seasonNum = toInteger(season), episodeNum = toInteger(episode);
    return seasonNum != null ? (' ' + Str.str("season") + " " + seasonNum + (episodeNum == null ? "" : ' ' + Str.str("episode") + " " + episodeNum))
            : (episodeNum != null ? ' ' + Str.str("episode") + " " + episodeNum : "");
  }

  private static Integer toInteger(String number) {
    return number == null || number.equals(Constant.ANY) ? null : Integer.valueOf(number);
  }
}
